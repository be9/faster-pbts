// AUTOGENERATED FILE
// This file was generated from grammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface JSDocTypeActionDict<T> extends BaseActionDict<T> {
  Type?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  SingleType?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ArrayType?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ObjectType?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: TerminalNode) => T;
  PromiseType?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  AnyType?: (this: NonterminalNode, arg0: TerminalNode) => T;
  Simple_type?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  Simple_literal?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Simple?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  id?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  stringLiteral?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
}

export interface JSDocTypeSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: JSDocTypeActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: JSDocTypeActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: JSDocTypeActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: JSDocTypeActionDict<T>): this;
}

export interface JSDocTypeGrammar extends Grammar {
  createSemantics(): JSDocTypeSemantics;
  extendSemantics(superSemantics: JSDocTypeSemantics): JSDocTypeSemantics;
}

declare const grammar: JSDocTypeGrammar;
export default grammar;

